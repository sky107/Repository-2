#pragma GCC optimize("-Ofast,unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,fma")

#include "bits/stdc++.h"

using namespace std;
constexpr int md=(int) 1e9+7;

const int dx[]={-1,0,1,0,1,1,-1,-1};
const int dy[]={0,1,0,-1,1,-1,-1,1};

template<class T> istream& operator >> (istream &is, vector<T>& V){
for(auto &e:V)is >> e;return is;}
template<class T> ostream& operator << (ostream &os, vector<T>& V){
for(auto e:V)os<<e<<" ";os<<"\n";return os;}
template <typename Head, typename... Tail>
inline void dbg_out(Head H, Tail... T) { cout << " " << to_string(H)<<"\n";}
#define dbg(...) cout << "[" << #__VA_ARGS__ << "]:", dbg_out(__VA_ARGS__)


signed main(){
  ios::sync_with_stdio(false);
  cin.tie(0);int t(1);
  // cin>>t;
  while(t--){
    int n;
    cin>>n;
    vector<int>v(n);
    long long res=0;
    for(int &e:v){
      cin>>e;
      res^=e;
    }
    int pos=0;
    
    //now we will find first point of differencec
    
    while((res&1)!=1){
      pos++;
      res=res>>1;
    }
    
    int mask=(1<<pos);
    int x=0;
    int y=0;
    for(auto e:v){
      if((mask&e)>0){
        x=x^e;
      }
    }
    //as we were interested in first  point of differencce we will get only one value as an x
    y=res^x;

    cout<<min(x,y)<<" "<<max(x,y)<<"\n";

  }
}
